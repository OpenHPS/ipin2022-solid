{"version":3,"file":"js/411-legacy.8f387aa7.js","mappings":"yMAEe,MAAMA,UAAwB,IAC3CC,YAAYC,GACV,MAAMC,EAAW,IAAIC,SAASF,GACxBG,EAAM,GAEZ,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOK,aAAcD,EAAG,CAC1C,IAAIE,EAASL,EAASM,QAAQH,GAC9B,GAAIE,EAAS,EAAG,CACd,MAAME,EAAOP,EAASQ,SAASL,EAAI,GACnCE,GAAUA,EACV,IAAK,IAAII,EAAI,EAAGA,GAAKJ,IAAUI,EAC7BP,EAAIQ,KAAKH,GAEXJ,GAAK,MACA,CACL,IAAK,IAAIM,EAAI,EAAGA,GAAKJ,IAAUI,EAC7BP,EAAIQ,KAAKV,EAASQ,SAASL,EAAIM,EAAI,IAErCN,GAAKE,EAAS,GAGlB,OAAO,IAAIM,WAAWT,GAAKH","sources":["webpack://ipin2022-geolocationapi/./node_modules/geotiff/dist-module/compression/packbits.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nexport default class PackbitsDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    const dataView = new DataView(buffer);\n    const out = [];\n\n    for (let i = 0; i < buffer.byteLength; ++i) {\n      let header = dataView.getInt8(i);\n      if (header < 0) {\n        const next = dataView.getUint8(i + 1);\n        header = -header;\n        for (let j = 0; j <= header; ++j) {\n          out.push(next);\n        }\n        i += 1;\n      } else {\n        for (let j = 0; j <= header; ++j) {\n          out.push(dataView.getUint8(i + j + 1));\n        }\n        i += header + 1;\n      }\n    }\n    return new Uint8Array(out).buffer;\n  }\n}\n"],"names":["PackbitsDecoder","decodeBlock","buffer","dataView","DataView","out","i","byteLength","header","getInt8","next","getUint8","j","push","Uint8Array"],"sourceRoot":""}