"use strict";(self["webpackChunkipin2022_geolocationapi"]=self["webpackChunkipin2022_geolocationapi"]||[]).push([[321],{3704:function(e,t,r){function n(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function i(e,t,r){let n=0,i=e.length;const o=i/r;while(i>t){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;i-=t}const l=e.slice();for(let a=0;a<o;++a)for(let t=0;t<r;++t)e[r*a+t]=l[(r-t-1)*o+a]}function o(e,t,r,o,l,a){if(!t||1===t)return e;for(let n=0;n<l.length;++n){if(l[n]%8!==0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[n]!==l[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const c=l[0]/8,s=2===a?1:l.length;for(let f=0;f<o;++f){if(f*s*r*c>=e.byteLength)break;let o;if(2===t){switch(l[0]){case 8:o=new Uint8Array(e,f*s*r*c,s*r*c);break;case 16:o=new Uint16Array(e,f*s*r*c,s*r*c/2);break;case 32:o=new Uint32Array(e,f*s*r*c,s*r*c/4);break;default:throw new Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}n(o,s,c)}else 3===t&&(o=new Uint8Array(e,f*s*r*c,s*r*c),i(o,s,c))}return e}r.d(t,{Z:function(){return l}});class l{async decode(e,t){const r=await this.decodeBlock(t),n=e.Predictor||1;if(1!==n){const t=!e.StripOffsets,i=t?e.TileWidth:e.ImageWidth,l=t?e.TileLength:e.RowsPerStrip||e.ImageLength;return o(r,n,i,l,e.BitsPerSample,e.PlanarConfiguration)}return r}}},83321:function(e,t,r){r.r(t),r.d(t,{default:function(){return i}});var n=r(3704);class i extends n.Z{decodeBlock(e){return e}}}}]);
//# sourceMappingURL=321-legacy.2aedfaf4.js.map